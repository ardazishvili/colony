cmake_minimum_required(VERSION 3.10)
set (CMAKE_CXX_STANDARD 17)
set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
project(Colony)

add_subdirectory(fig)

include_directories(fig/third/logging/spdlog/include)
link_directories(fig/cbuild)
add_executable(colony
		logic/Buildable.cpp
		logic/Buildable.h
		logic/Control.cpp
		logic/Control.h
    figImpl/ColonyEventManager.cpp
		figImpl/ColonyEventManager.h
		logic/Game.cpp
		logic/Game.h
		logic/Hq.cpp
		logic/Hq.h
		logic/HqBuilder.cpp
		logic/HqBuilder.h
		logic/Panel.cpp
		logic/Panel.h
		logic/PanelItem.cpp
		logic/PanelItem.h
		logic/Shell.cpp
		logic/Shell.h
		logic/Tank.cpp
		logic/Tank.h
		logic/TankBuilder.cpp
		logic/TankBuilder.h
		logic/TankFactory.cpp
		logic/TankFactory.h
		logic/TankFactoryBuilder.cpp
		logic/TankFactoryBuilder.h
		logic/VehicleGroup.cpp
		logic/VehicleGroup.h
		view/HqView.cpp
		view/HqView.h
		view/ShellView.cpp
		view/ShellView.h
		view/TankFactoryView.cpp
		view/TankFactoryView.h
		view/TankView.cpp
		view/TankView.h
		view/View.cpp
		view/View.h
    figImpl/globals.h
    figImpl/globals.cpp
    figImpl/ColonyApplication.h
    figImpl/ColonyApplication.cpp
    figImpl/events/ColonyEventFabric.cpp
    figImpl/events/ColonyEventFabric.h
    figImpl/events/ColonyKeyPressEvent.cpp
    figImpl/events/ColonyKeyPressEvent.h
    figImpl/events/ColonyKeyReleaseEvent.cpp
    figImpl/events/ColonyKeyReleaseEvent.h
    figImpl/events/ColonyKeyRepeatEvent.cpp
    figImpl/events/ColonyKeyRepeatEvent.h
    figImpl/events/ColonyMouseMoveEvent.cpp
    figImpl/events/ColonyMouseMoveEvent.h
    figImpl/events/ColonyMousePressEvent.cpp
    figImpl/events/ColonyMousePressEvent.h
    figImpl/events/ColonyMouseReleaseEvent.cpp
    figImpl/events/ColonyMouseReleaseEvent.h
    figImpl/events/ColonyMouseScrollEvent.cpp
    figImpl/events/ColonyMouseScrollEvent.h
    figImpl/ColonyGameLayer.h
    figImpl/ColonyGameLayer.cpp
    figImpl/ColonyGuiLayer.h
    figImpl/ColonyGuiLayer.cpp
    logic/AbstractPlant.cpp
    logic/AbstractPlant.h
    logic/AbstractPlantBuilder.cpp
    logic/AbstractPlantBuilder.h
    logic/AttackUnit.cpp
    logic/AttackUnit.h
    logic/Attacking.cpp
    logic/Attacking.h
    logic/Barrier.cpp
    logic/Barrier.h
    logic/BarrierBuilder.cpp
    logic/BarrierBuilder.h
    logic/EnergyStructure.cpp
    logic/EnergyStructure.h
    logic/GroundStructure.cpp
    logic/GroundStructure.h
    logic/Moving.cpp
    logic/Moving.h
    logic/NonAttackUnit.cpp
    logic/NonAttackUnit.h
    logic/Plant.cpp
    logic/Plant.h
    logic/PlantBuilder.cpp
    logic/PlantBuilder.h
    logic/Selectable.cpp
    logic/Selectable.h
    logic/Shroud.cpp
    logic/Shroud.h
    logic/Structure.cpp
    logic/Structure.h
    logic/Tree.cpp
    logic/Tree.h
    logic/TreeBuilder.cpp
    logic/TreeBuilder.h
    logic/Turbine.cpp
    logic/Turbine.h
    logic/TurbineBuilder.cpp
    logic/TurbineBuilder.h
    logic/Unit.cpp
    logic/Unit.h
    main.cpp 
    view/AbstractPlantView.cpp
    view/AbstractPlantView.h
    view/AttackUnitView.cpp
    view/AttackUnitView.h
    view/BarrierView.cpp
    view/BarrierView.h
    view/PlantView.cpp
    view/PlantView.h
    view/SelectableView.cpp
    view/SelectableView.h
    view/ShroudView.cpp
    view/ShroudView.h
    view/StructureView.cpp
    view/StructureView.h
    view/TreeView.cpp
    view/TreeView.h
    view/TurbineView.cpp
    view/TurbineView.h
    view/UnitView.cpp
    view/UnitView.h
		)

target_link_libraries(colony fig glfw dl GL GLEW assimp pthread)
file(COPY assets DESTINATION ${CMAKE_BINARY_DIR})
file(COPY shaders DESTINATION ${CMAKE_BINARY_DIR})
